func main()
	var n: int :: 1
	while loop(true)
		do n :+ 2
		if(!math@prime(n))
			skip loop
		end if
		var s: []char :: n.toStr()
		var x: int :: -1
		for i(0, 9)
			var cnt: int :: 0
			for j(0, ^s - 1)
				do cnt :+ s[j] = '0'.offset(i) ?(1, 0)
			end for
			; 3の倍数個変えないと、10個中7個しか素数にならない(3で割れるものが3つ以上存在するといえる。)
			if(cnt = 3)
				do x :: i
				break i
			end if
		end for
		if(x = -1)
			skip loop
		end if
		var p: []int :: #[0]int
		for i(0, ^s - 1)
			if(s[i] = '0'.offset(x))
				do p :~ [i]
			end if
		end for
		var cnt: int :: 0
		for i(0, 9)
			if(p[0] = 0 & i = 0)
				do cnt :+ 1
				skip i
			end if
			for j(0, 2)
				do s[p[j]] :: '0'.offset(i)
			end for
			if(!math@prime(s.toInt(&)))
				do cnt :+ 1
			end if
			if(cnt = 3)
				skip loop
			end if
		end for
		do cui@print("\{n}\n")
		ret
	end while
end func
