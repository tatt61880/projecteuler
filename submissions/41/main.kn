func next_permutation(arr: []int): bool
	if(^arr = 1)
		ret false
	end if
	var first: int :: 0
	var last: int :: ^arr
	var i: int :: last - 1
	var temp: []int :: #[^arr]int
	while(true)
		var ii: int :: i
		do i :- 1
		if(arr[i] < arr[ii])
			var j: int :: last - 1
			while(arr[i] >= arr[j])
				do j :- 1
			end while
			do arr[i] :$ arr[j]
			for x(ii, last - 1)
				do temp[x] :: arr[x]
			end for
			for x(ii, last - 1)
				do arr[ii + last - 1 - x] :: temp[x]
			end for
			ret true
		end if
		if(i = first)
			do arr.reverse()
			ret false
		end if
	end while
end func

func main()
	; 8-digit and 9-digit pandigital is allways not-prime.
	const nMax: int :: 7
	var ans: int :: 0
	for n(1, nMax)
		var arr: []int :: #[n]int
		for i(0, n - 1)
			do arr[i] :: i + 1
		end for
		while(@next_permutation(arr), skip)
			var num: int :: 0
			for i(0, n - 1)
				do num :* 10
				do num :+ arr[i]
			end for
			if(num > ans & math@prime(num))
				do ans :: num
			end if
		end while
	end for
	do cui@print("\{ans}\n")
end func
