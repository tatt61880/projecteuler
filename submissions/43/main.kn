func next_permutation(arr: []int): bool
	if(^arr = 1)
		ret false
	end if
	var first: int :: 0
	var last: int :: ^arr
	var i: int :: last - 1
	var temp: []int :: #[^arr]int
	while(true)
		var ii: int :: i
		do i :- 1
		if(arr[i] < arr[ii])
			var j: int :: last - 1
			while(arr[i] >= arr[j])
				do j :- 1
			end while
			do arr[i] :$ arr[j]
			for x(ii, last - 1)
				do temp[x] :: arr[x]
			end for
			for x(ii, last - 1)
				do arr[ii + last - 1 - x] :: temp[x]
			end for
			ret true
		end if
		if(i = first)
			do arr.reverse()
			ret false
		end if
	end while
end func

func main()
	const n: int :: 10
	var ans: int :: 0
	var arr: []int :: #[n]int
	for i(0, n - 1)
		do arr[i] :: i
	end for
	var primes: []int :: [17, 13, 11, 7, 5, 3, 2]
	while loop(@next_permutation(arr), skip)
		var num: int :: arr[2] * 100 + arr[1] * 10 + arr[0]
		for i(0, 6)
			if(num % primes[i] <> 0)
				skip loop
			end if
			do num :/ 10
			do num :+ 100 * arr[3 + i]
		end for
		do num :: 0
		for i(0, 9)
			do num :+ 10 ^ i * arr[i]
		end for
		do ans :+ num
	end while
	do cui@print("\{ans}\n")
end func
